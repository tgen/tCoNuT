function tCoNuT_mouse(normalDat,tumorDat,sampName,hetFile,smWin,fcThresh,assayID,...
    res,readDepth,intronLength,hetDepthN,hetDepthT,hetDev,targetsFile)
% tCoNuT(normalDat,tumorDat,sampName,hetFile,smWin,fcThresh,assayID,...
%    res,readDepth,intronLength,hetDepthN,hetDepthT,hetDev,targetsFile)
%
%   Calling function for cnaMedianCenter.m. Reads in input data from files
%   and writes out results of copy number analysis out to TSV files.
%
%   INPUT:
%       normalDat is DAT file produced from tgen_CloneCov.v0092.pl being
%       run on control BAM.
%
%       tumorDat is DAT file produced from tgen_CloneCov.v0092.pl being run
%       on affected/tumor BAM.
%
%       sampName is string to be used for output filenames.
%
%       hetFile is a TXT file produced by parseMergeVCF.pl. Usually named
%       merged.vcf.txt. This file contains allele frequencies of hets
%       identified in the control sample and in the associated
%       affected/tumor.
%
%       smWin is the size of a sliding window (e.g. 6 for exomes and 19 for
%       WGS).
%       
%       fcThresh is the threshold where 'amp' and 'del' are determined for
%       plotting purposes.
%   
%       assayID is the type of assay.  Options are Genome or Exome (or
%       FFPE - not supported)
%
%       res is the factor that sets the starting size of the window of
%       positions evaluated for averaging then increments window size by 1
%       until average reaches readDepth.  Window size units are 100 bases
%       Example is a window size of 3 is equivalent to 300 bases, so setting
%       res=2 intitial window size will be 3 (1:1+2) then incremented from
%       there 1:1+2+i where i=i+1.
%
%       readDepth is the maximum read depth for window when incrementing window size.
%
%       intronLength is the maximum distance (in bases) allowed between positions when
%       incrementing window size. This accounts for introns in exome data
%       and centromeres in whole genome data. 
%
%       hetFile is M x 8 matrix contain the allele frequencies of
%       heterzygous SNPs identified in the control sample and allele
%       frequencies of tumor sample at corresponding locations. Columns are
%       as follows: chromosome, position, read depth of control sample,
%       control reference allele frequency, control alternate allele
%       frequency, read depth of affected sample, affected reference allele
%       frequency, and affected alternate allele frequency. This input can
%       be read in from merged.vcf.txt generated by parseMergeVCF.pl. If
%       merged.vcf.txt is not available, hetFile needs to equal 0.
%
%       hetDepthN is an estimate of read depth over SNP in control sample.
%       This value is used to set thresholds for filtering SNPs used for
%       centering.  For example with exome data the average target coverage
%       can be used and for genome physical coverage can be used.
%
%       hetDepthT is an estimate of read depth over SNP in affected sample.
%       This value is used to set thresholds for filtering SNPs used for
%       centering.  For example with exome data the average target coverage
%       can be used and for genome physical coverage can be used.
%
%       hetDev is allowable deviation from a 0.5 allele frequency in the
%       affected sample for a SNP used for centering.  For example if set
%       to 0.025 the thresholds for filtering will be 0.475 < SNP allele
%       frequency < 0.525.
%
%       targetsFile is M x 4 matrix where columns are as follows:
%       chromosome, start position, end position, and index. The index
%       column contains 0 or >0 where all regions with a 0 are
%       filtered from the analysis.  This matrix is usually created by
%       reading in a BED file generated to indicate areas of the genome not
%       covered by an assay.  For example, exome data will need this BED
%       file created from the Targets BED file provided by manufacturer.
%       This file can also be used to filter regions from the genome such
%       as common structural variant regions or regions with poor mapping.
%
%       OUTPUTS:
%           'sampName'.cna.tsv is an output file that contains 
%           chromosome, position and log2fold-change.
%
%           'sampName'.amp.tsv is an output file that contains chromosome,
%           position, and log2 fold-change for positions with
%           log2 fold-change > fcThresh.
%
%           'sampName'.del.tsv is an output file that contains chromosome,
%           position, and log2 fold-change for positions with log2
%           fold-change < -fcThresh.
%
%           'sampName'.hets.tsv is an output file that contains chromosome,
%           position, and log2 fold-change of positions used for centering.
%
%           'sampName'.baf.tsv is an output file that contains chromosome,
%           position, and log2 fold-change of the b-allele frequency for
%           positons with hets in control sample.
%
%           'sample'.cnaStats this is a text file that contains the DLRS
%           and physical coverage (whole genome only) for each sample.
%

%   [2010] - [2016] Translational Genomics Research Institute (TGen)
%   All Rights Reserved.
%
%   Major Contributor(s):
%       Jessica Aldrich, David W. Craig, Jonathan Keats
%   Minor Contributor(s):

% Input handling
if ischar(smWin)
    smWin=str2num(smWin); %#ok<*ST2NM>
end

if ischar(fcThresh)
    fcThresh=str2num(fcThresh);
end

if ischar(res)
    res=str2num(res);
end

if ischar(readDepth)
    readDepth=str2num(readDepth);
end

if ischar(intronLength)
    intronLength=str2num(intronLength);
end

if ischar(hetDepthN)
   hetDepthN=str2num(hetDepthN); 
end

if ischar(hetDepthT)
   hetDepthT=str2num(hetDepthT); 
end

if ischar(hetDev)
   hetDev=str2num(hetDev); 
end

if hetFile=='0'
    hetFile=str2num(hetFile);
end

% Load DAT files
normal=load(normalDat);
tumor=load(tumorDat);


% Physical coverage (mainly for WG data)
tumormode = mode(tumor(tumor(:,3)>5,3));
normalmode = mode(normal(normal(:,3)>5,3));

log2fc=[];
bafFreq=[];
% Call cnaMedianCenter
switch lower(assayID)
    case 'exome'
	if hetFile==0
        	[cna,amp,del,dlr]=cnaMedianCenter(normal,tumor,smWin,fcThresh,assayID,...
            	res,readDepth,intronLength,hetFile,hetDepthN,hetDepthT,hetDev,targetsFile);
	else
		[cna,amp,del,dlr,log2fc,bafFreq]=cnaMedianCenter(normal,tumor,smWin,fcThresh,assayID,...
            	res,readDepth,intronLength,hetFile,hetDepthN,hetDepthT,hetDev,targetsFile);
	end

    case 'genome'
        
        if hetDepthT == 0 && hetDepthN==0
            hetDepthT=tumormode;
            hetDepthN=normalmode;
        end
       
	%with filter file but no hets for centering 
        if nargin==14 && ~ischar(hetFile)
		[cna,amp,del,dlr]=cnaMedianCenter(normal,tumor,smWin,fcThresh,assayID,...
            res,readDepth,intronLength,hetFile,hetDepthN,hetDepthT,hetDev,targetsFile);

	%with filter file and hets for centering
	elseif nargin==14
            [cna,amp,del,dlr,log2fc,bafFreq]=cnaMedianCenter(normal,tumor,smWin,fcThresh,assayID,...
            res,readDepth,intronLength,hetFile,hetDepthN,hetDepthT,hetDev,targetsFile);
            
	%without filter file and no hets for centering
	elseif hetFile==0
		[cna,amp,del,dlr]=cnaMedianCenter(normal,tumor,smWin,fcThresh,assayID,...
                res,readDepth,intronLength,hetFile,hetDepthN,hetDepthT,hetDev);
        
	%without filter file and has hets for centering
	else
            [cna,amp,del,dlr,log2fc,bafFreq]=cnaMedianCenter(normal,tumor,smWin,fcThresh,assayID,...
                res,readDepth,intronLength,hetFile,hetDepthN,hetDepthT,hetDev);
            
        end
    %special case - not supported
    case 'ffpe'
            assayID = 'exome';
            [cna,amp,del,dlr,log2fc,bafFreq]=cnaMedianCenterFFPE(normal,tumor,smWin,fcThresh,assayID,...
            res,readDepth,intronLength,hetFile,hetDepthN,hetDepthT,hetDev,targetsFile);
end

%  Write cna TSV file
fileName = [sampName,'.cna.tsv'];
writeTSV(fileName,cna,'Fold-Change');

%  Write amp TSV file
fileName = [sampName,'.amp.tsv'];
writeTSV(fileName,amp,'Fold-Change');

%  Write del TSV file
fileName = [sampName,'.del.tsv'];
writeTSV(fileName,del,'Fold-Change');

%  Write del log2fc of HETs file
if ~isempty(log2fc)
    fileName = [sampName,'.hets.tsv'];
    writeTSV(fileName,log2fc,'Fold-Change');
end

%  Write BAF to baf file
if ~isempty(bafFreq)
    fileName = [sampName,'.baf.tsv'];
    writeTSV(fileName,bafFreq,'BAF');
end

switch lower(assayID)
    case 'exome'
        % Write physical coverage and noise TXT files
        fid = fopen([normalDat,'.cnaStats'],'w+');
        fprintf(fid,'%s\n','DLRS');
        fprintf(fid,'%f\n',dlr);
        fclose(fid);
        
        fid = fopen([tumorDat,'.cnaStats'],'w+');
        fprintf(fid,'%s\n','DLRS');
        fprintf(fid,'%f\n',dlr);
        fclose(fid);
        
    case 'genome'
        % Write physical coverage and noise TXT files
        fid = fopen([normalDat,'.cnaStats'],'w+');
        fprintf(fid,'%s\t%s\n','DLRS','NormalPhysCoverage');
        fprintf(fid,'%f\t%d\n',dlr,normalmode);
        fclose(fid);
        
        fid = fopen([tumorDat,'.cnaStats'],'w+');
        fprintf(fid,'%s\t%s\n','DLRS','TumorPhysCoverage');
        fprintf(fid,'%f\t%d\n',dlr,tumormode);
        fclose(fid);
end
end
